type TransferEntity @entity {
  id: ID!
  blockId: String!
  blockHash: String!
  extrinsicId: String!
  isSuccess: Boolean!
  timestamp: Date!
  from: String!
  to: String!
  currency: String!
  amount: String!
  amountRounded: Float!
}

type CollectionEntity @entity {
  id: ID!
  collectionId: String!
  owner: String @index
  offchainData: String!
  nfts: [String]!
  nbNfts: Int!
  limit: Int
  hasReachedLimit: Boolean!
  isClosed: Boolean!
  timestampCreated: Date!
  timestampBurned: Date
  timestampClosed: Date
  timestampLimited: Date
}

type NftEntity @entity {
  id: ID!
  nftId: String!
  auction: AuctionEntity
  collection: CollectionEntity
  owner: String @index
  creator: String! @index
  offchainData: String!
  secretOffchainData: String
  capsuleOffchainData: String
  royalty: Float!
  isCapsule: Boolean!
  isCapsuleSynced: Boolean!
  isSecret: Boolean!
  isSecretSynced: Boolean!
  delegatee: String @index
  isDelegated: Boolean!
  isSoulbound: Boolean!
  isListed: Boolean!
  typeOfListing: String
  isRented: Boolean!
  rentee: String
  rentalContract: RentEntity
  price: String
  priceRounded: Float
  marketplace: MarketplaceEntity
  isTransmission: Boolean!
  transmissionRecipient: String
  transmissionProtocol: TransmissionEntity
  createdAt: Date!
  updatedAt: Date!
  timestampCreated: Date!
  timestampBurned: Date
  timestampListed: Date
  timestampRented: Date
  timestampSecretAdded: Date
  timestampConvertedToCapsule: Date
}

type NftOperationEntity @entity {
  id: ID!
  blockId: String! @index
  extrinsicId: String!
  nft: NftEntity!
  from: String @index
  to: String @index
  collectionId: String @index
  commissionFeeType: String
  commissionFee: String
  commissionFeeRounded: Float
  listingFeeType: String
  listingFee: String
  listingFeeRounded: Float
  price: String
  priceRounded: Float
  royalty: Float
  royaltyCut: String
  royaltyCutRounded: Float
  marketplaceId: String @index
  marketplaceCut: String
  marketplaceCutRounded: Float
  auctionStartPrice: String
  auctionStartPriceRounded: Float
  auctionBuyItNowPrice: String
  auctionBuyItNowPriceRounded: Float
  rentalContractStartBlock: Int
  rentalContractDuration: String
  rentalContractBlockDuration: Int
  rentalContractMaxSubscriptionBlockDuration: Int
  rentalContractFeeType: String
  rentalContractFee: String
  rentalContractFeeRounded: Float
  transmissionProtocol: String
  transmissionEndBlock: Int
  timestamp: Date! @index
  typeOfTransaction: String! @index
}

type RentEntity @entity {
  id: ID!
  nftId: String! @index
  hasStarted: Boolean!
  hasEnded: Boolean!
  hasBeenCanceled: Boolean!
  isExpired: Boolean!
  renter: String! @index
  rentee: String @index
  startBlockId: Int
  creationBlockId: Int!
  durationType: String!
  blockDuration: Int
  maxSubscriptionBlockDuration: Int
  isSubscriptionChangeable: Boolean
  nextSubscriptionRenewalBlockId: Int
  nbSubscriptionRenewal: Int
  newTermsAvailable: Boolean
  nbTermsUpdate: Int
  acceptanceType: String!
  acceptanceList: [String]
  renterCanRevoke: Boolean!
  revokedBy: String
  rentFeeType: String!
  rentFee: String!
  rentFeeRounded: Float!
  rentOffers: [String]
  nbRentOffers: Int
  totalRentOffersReceived: Int
  renterCancellationFeeType: String
  renterCancellationFee: String
  renterCancellationFeeRounded: Float
  renteeCancellationFeeType: String
  renteeCancellationFee: String
  renteeCancellationFeeRounded: Float
  timestampCreated: Date!
  timestampStarted: Date
  timestampLastSubscriptionRenewal: Date
  timestampLastTermsUpdate: Date
  timestampLastOffer: Date
  timestampEnded: Date
  timestampCancelled: Date
  timestampRevoked: Date
  timestampExpired: Date
}

type MarketplaceEntity @entity {
  id: ID!
  marketplaceId: String! @index
  owner: String! @index
  kind: String!
  commissionFeeType: String
  commissionFee: String
  commissionFeeRounded: Float
  listingFeeType: String
  listingFee: String
  listingFeeRounded: Float
  accountList: [String]
  offchainData: String
  collectionList: [String]
  createdAt: Date!
  updatedAt: Date!
  timestampCreated: Date!
}

type Bidder @jsonField {
  bidder: String!
  amount: String!
  amountRounded: Float!
  timestampBid: Date
}

type AuctionEntity @entity {
  id: ID!
  nftId: String! @index
  marketplaceId: String
  creator: String! @index
  startPrice: String
  startPriceRounded: Float
  buyItNowPrice: String
  buyItNowPriceRounded: Float
  startBlockId: Int
  endBlockId: Int
  isCompleted: Boolean!
  isCancelled: Boolean!
  isExtendedPeriod: Boolean!
  bidders: [Bidder]!
  nbBidders: Int
  topBidAmount: String
  topBidAmountRounded: Float
  typeOfSale: String
  timestampCreated: Date!
  timestampEnded: Date
  timestampLastBid: Date
  timestampCancelled: Date
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String
  capsAmountFrozen: String
  capsAmountTotal: String
  capsAmountRounded: Float
  capsAmountFrozenRounded: Float
  capsAmountTotalRounded: Float
  createdAt: Date!
  updatedAt: Date!
}

type AggregateResultEntity @entity {
  id: ID!
  occurences: Int!
}

type TransmissionEntity @entity {
  id: ID!
  nftId: String! @index
  from: String!
  to: String!
  isActive: Boolean!
  isThresholdReached: Boolean!
  protocol: String!
  endBlock: Int
  consentList: [String]
  currentConsent: [String]
  threshold: Int
  cancellation: String
  cancellationBlock: Int
  createdAt: Date!
  updatedAt: Date!
  timestampCreated: Date!
  timestampRemoved: Date
  timestampUpdated: Date
  timestampTransmitted: Date
}
